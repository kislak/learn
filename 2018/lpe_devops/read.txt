configuration management
  provision
  recovery
  snowflake-server
  version control
  replicated env

tools
  ansible
  puppet
  chef


puppet
  describe system resources
  dsl based on ruby
  resource types:
    users,
    groups,
    file,
    package,
    service
  manifest_file

> puppet commands
  apply
  agent
  cert
  module
  resource

chef (opscode 2009)
  cookstyle
  foodcritic
  chefspec
  inspec
  test kitchen

  chef-client
  chef-solo
  knife

ansible
  no agent
  playbook
  zero downtime or rolling updates

> ansible
  ansible-config
  ansible-console (repl)
  ansible-galaxy (configure Nginx)
  ansible-inventory
  ansible-playbook
  ansible-pull (pull and execute script on local)

inventory /etc/ansible/hosts

ansible vault
  sensitive data

> ansible-vault create foo.yml
> ansible-vault rekey foo.yml #change spassword
                view foo.yml

-----
adduser ansible
passwd ansible
visudo
ssh-keygen
ssh-copy-id

/etc/ansible/hosts
  client

cp /home/could_user/playbook.yml /home/ansible

elinks

Docker

git clone https://github.com/linuxacademy/content-express-demo-app.git


Dockerfile
FROM node

RUN mkdir -p /var/node
ADD content-express-demo-app/ /var/node
WORKDIR /var/node
RUN npm install

CMD bin/www

docker build -t la/app-node -f Dockerfile .



-------------
FROM nginx
VOLUME /usr/share/nginx/html
VOLUME /var/log/nginx
WORKDIR /usr/share/nginx/html

    5 docker build -t la/static-state:latest -f Dockerfile .
    6  docker images
    7  docker volume create nginx-code
    8  docker volume create nginx-logs
    9  docker volumes ls
   10  docker volume ls
   11  docker run -d --name=static-site -p 80:80 --mount source=nginx-code,target=/usr/share/nginx/html --mount source=nginx-logs,target=/var/logs/nginx la/static-site:latest
   12  docker ps
   13  docker images
   14  docker run -d --name=static-site -p 80:80 --mount source=nginx-code,target=/usr/share/nginx/html --mount source=nginx-logs,target=/var/logs/nginx la/static-state:latest
   15  ls
   16  docker volume ps
   17  docker volume ls
   18  cd /var/lib/docker/volumes/
   19  ls
   20  cd nginx-code/_data/
   21  ls
   22  vim index.html


docker network create app-bridge
docker run -dt -p 8080:80 --name my-app --network app-bridge nginx:latest
docker stop c293bffd33
docker container ls -a
docker rm c293bffd33


----------
version: '3.3'
services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: R00tP4ssw0rd
      MYSQL_DATABASE: app_name
      MYSQL_USER: db_user
      MYSQL_PASSWORD: 4pp_n4meP4sswrd0!
  webapp:
    image: php:7.0-apache
    volumes:
      - app_data:/var/www/html
      - app_logs:/var/logs/apache2
    restart: always
    links:
      - db

volumes:
  db_data:
  app_data:
  app_logs:

docker-compose up -d

--------------
1> docker swarm init
2> docker swarm join --token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2 192.168.99.121:2377
1> docker pull httpd
1> docker service create --name our_api --replicas=2 httpd:latest

